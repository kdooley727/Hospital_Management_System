#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Hospital_Management_System._2._2_Patient_Man
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="HMSCORE")]
	public partial class patientDataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAilment(Ailment instance);
    partial void UpdateAilment(Ailment instance);
    partial void DeleteAilment(Ailment instance);
    partial void InsertPatientTableNew(PatientTableNew instance);
    partial void UpdatePatientTableNew(PatientTableNew instance);
    partial void DeletePatientTableNew(PatientTableNew instance);
    partial void InsertAppointTableNew(AppointTableNew instance);
    partial void UpdateAppointTableNew(AppointTableNew instance);
    partial void DeleteAppointTableNew(AppointTableNew instance);
    #endregion
		
		public patientDataClasses1DataContext() : 
				base(global::Hospital_Management_System.Properties.Settings.Default.HMSCOREConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public patientDataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public patientDataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public patientDataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public patientDataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Ailment> Ailments
		{
			get
			{
				return this.GetTable<Ailment>();
			}
		}
		
		public System.Data.Linq.Table<PatientTableNew> PatientTableNews
		{
			get
			{
				return this.GetTable<PatientTableNew>();
			}
		}
		
		public System.Data.Linq.Table<AppointTableNew> AppointTableNews
		{
			get
			{
				return this.GetTable<AppointTableNew>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ailments")]
	public partial class Ailment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AilmentID;
		
		private System.Nullable<int> _PatientID;
		
		private string _AilmentDescription;
		
		private System.Nullable<System.DateTime> _AilmentDate;
		
		private EntityRef<PatientTableNew> _PatientTableNew;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAilmentIDChanging(int value);
    partial void OnAilmentIDChanged();
    partial void OnPatientIDChanging(System.Nullable<int> value);
    partial void OnPatientIDChanged();
    partial void OnAilmentDescriptionChanging(string value);
    partial void OnAilmentDescriptionChanged();
    partial void OnAilmentDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAilmentDateChanged();
    #endregion
		
		public Ailment()
		{
			this._PatientTableNew = default(EntityRef<PatientTableNew>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AilmentID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AilmentID
		{
			get
			{
				return this._AilmentID;
			}
			set
			{
				if ((this._AilmentID != value))
				{
					this.OnAilmentIDChanging(value);
					this.SendPropertyChanging();
					this._AilmentID = value;
					this.SendPropertyChanged("AilmentID");
					this.OnAilmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientID", DbType="Int")]
		public System.Nullable<int> PatientID
		{
			get
			{
				return this._PatientID;
			}
			set
			{
				if ((this._PatientID != value))
				{
					if (this._PatientTableNew.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientIDChanging(value);
					this.SendPropertyChanging();
					this._PatientID = value;
					this.SendPropertyChanged("PatientID");
					this.OnPatientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AilmentDescription", DbType="NVarChar(255)")]
		public string AilmentDescription
		{
			get
			{
				return this._AilmentDescription;
			}
			set
			{
				if ((this._AilmentDescription != value))
				{
					this.OnAilmentDescriptionChanging(value);
					this.SendPropertyChanging();
					this._AilmentDescription = value;
					this.SendPropertyChanged("AilmentDescription");
					this.OnAilmentDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AilmentDate", DbType="Date")]
		public System.Nullable<System.DateTime> AilmentDate
		{
			get
			{
				return this._AilmentDate;
			}
			set
			{
				if ((this._AilmentDate != value))
				{
					this.OnAilmentDateChanging(value);
					this.SendPropertyChanging();
					this._AilmentDate = value;
					this.SendPropertyChanged("AilmentDate");
					this.OnAilmentDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PatientTableNew_Ailment", Storage="_PatientTableNew", ThisKey="PatientID", OtherKey="PatientID", IsForeignKey=true)]
		public PatientTableNew PatientTableNew
		{
			get
			{
				return this._PatientTableNew.Entity;
			}
			set
			{
				PatientTableNew previousValue = this._PatientTableNew.Entity;
				if (((previousValue != value) 
							|| (this._PatientTableNew.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PatientTableNew.Entity = null;
						previousValue.Ailments.Remove(this);
					}
					this._PatientTableNew.Entity = value;
					if ((value != null))
					{
						value.Ailments.Add(this);
						this._PatientID = value.PatientID;
					}
					else
					{
						this._PatientID = default(Nullable<int>);
					}
					this.SendPropertyChanged("PatientTableNew");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PatientTableNew")]
	public partial class PatientTableNew : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PatientID;
		
		private string _Patient_FName;
		
		private string _Patient_LName;
		
		private string _Patient_Phone;
		
		private string _Patient_Address;
		
		private string _Patient_Insurance;
		
		private EntitySet<Ailment> _Ailments;
		
		private EntitySet<AppointTableNew> _AppointTableNews;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPatientIDChanging(int value);
    partial void OnPatientIDChanged();
    partial void OnPatient_FNameChanging(string value);
    partial void OnPatient_FNameChanged();
    partial void OnPatient_LNameChanging(string value);
    partial void OnPatient_LNameChanged();
    partial void OnPatient_PhoneChanging(string value);
    partial void OnPatient_PhoneChanged();
    partial void OnPatient_AddressChanging(string value);
    partial void OnPatient_AddressChanged();
    partial void OnPatient_InsuranceChanging(string value);
    partial void OnPatient_InsuranceChanged();
    #endregion
		
		public PatientTableNew()
		{
			this._Ailments = new EntitySet<Ailment>(new Action<Ailment>(this.attach_Ailments), new Action<Ailment>(this.detach_Ailments));
			this._AppointTableNews = new EntitySet<AppointTableNew>(new Action<AppointTableNew>(this.attach_AppointTableNews), new Action<AppointTableNew>(this.detach_AppointTableNews));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PatientID
		{
			get
			{
				return this._PatientID;
			}
			set
			{
				if ((this._PatientID != value))
				{
					this.OnPatientIDChanging(value);
					this.SendPropertyChanging();
					this._PatientID = value;
					this.SendPropertyChanged("PatientID");
					this.OnPatientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_FName", DbType="NVarChar(100)")]
		public string Patient_FName
		{
			get
			{
				return this._Patient_FName;
			}
			set
			{
				if ((this._Patient_FName != value))
				{
					this.OnPatient_FNameChanging(value);
					this.SendPropertyChanging();
					this._Patient_FName = value;
					this.SendPropertyChanged("Patient_FName");
					this.OnPatient_FNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_LName", DbType="NVarChar(100)")]
		public string Patient_LName
		{
			get
			{
				return this._Patient_LName;
			}
			set
			{
				if ((this._Patient_LName != value))
				{
					this.OnPatient_LNameChanging(value);
					this.SendPropertyChanging();
					this._Patient_LName = value;
					this.SendPropertyChanged("Patient_LName");
					this.OnPatient_LNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_Phone", DbType="NVarChar(20)")]
		public string Patient_Phone
		{
			get
			{
				return this._Patient_Phone;
			}
			set
			{
				if ((this._Patient_Phone != value))
				{
					this.OnPatient_PhoneChanging(value);
					this.SendPropertyChanging();
					this._Patient_Phone = value;
					this.SendPropertyChanged("Patient_Phone");
					this.OnPatient_PhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_Address", DbType="NVarChar(255)")]
		public string Patient_Address
		{
			get
			{
				return this._Patient_Address;
			}
			set
			{
				if ((this._Patient_Address != value))
				{
					this.OnPatient_AddressChanging(value);
					this.SendPropertyChanging();
					this._Patient_Address = value;
					this.SendPropertyChanged("Patient_Address");
					this.OnPatient_AddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_Insurance", DbType="NVarChar(100)")]
		public string Patient_Insurance
		{
			get
			{
				return this._Patient_Insurance;
			}
			set
			{
				if ((this._Patient_Insurance != value))
				{
					this.OnPatient_InsuranceChanging(value);
					this.SendPropertyChanging();
					this._Patient_Insurance = value;
					this.SendPropertyChanged("Patient_Insurance");
					this.OnPatient_InsuranceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PatientTableNew_Ailment", Storage="_Ailments", ThisKey="PatientID", OtherKey="PatientID")]
		public EntitySet<Ailment> Ailments
		{
			get
			{
				return this._Ailments;
			}
			set
			{
				this._Ailments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PatientTableNew_AppointTableNew", Storage="_AppointTableNews", ThisKey="PatientID", OtherKey="PatientID")]
		public EntitySet<AppointTableNew> AppointTableNews
		{
			get
			{
				return this._AppointTableNews;
			}
			set
			{
				this._AppointTableNews.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Ailments(Ailment entity)
		{
			this.SendPropertyChanging();
			entity.PatientTableNew = this;
		}
		
		private void detach_Ailments(Ailment entity)
		{
			this.SendPropertyChanging();
			entity.PatientTableNew = null;
		}
		
		private void attach_AppointTableNews(AppointTableNew entity)
		{
			this.SendPropertyChanging();
			entity.PatientTableNew = this;
		}
		
		private void detach_AppointTableNews(AppointTableNew entity)
		{
			this.SendPropertyChanging();
			entity.PatientTableNew = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AppointTableNew")]
	public partial class AppointTableNew : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AppID;
		
		private System.Nullable<System.DateTime> _AppDay;
		
		private System.Nullable<System.TimeSpan> _AppTime;
		
		private System.Nullable<int> _PatientID;
		
		private EntityRef<PatientTableNew> _PatientTableNew;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAppIDChanging(int value);
    partial void OnAppIDChanged();
    partial void OnAppDayChanging(System.Nullable<System.DateTime> value);
    partial void OnAppDayChanged();
    partial void OnAppTimeChanging(System.Nullable<System.TimeSpan> value);
    partial void OnAppTimeChanged();
    partial void OnPatientIDChanging(System.Nullable<int> value);
    partial void OnPatientIDChanged();
    #endregion
		
		public AppointTableNew()
		{
			this._PatientTableNew = default(EntityRef<PatientTableNew>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AppID
		{
			get
			{
				return this._AppID;
			}
			set
			{
				if ((this._AppID != value))
				{
					this.OnAppIDChanging(value);
					this.SendPropertyChanging();
					this._AppID = value;
					this.SendPropertyChanged("AppID");
					this.OnAppIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppDay", DbType="Date")]
		public System.Nullable<System.DateTime> AppDay
		{
			get
			{
				return this._AppDay;
			}
			set
			{
				if ((this._AppDay != value))
				{
					this.OnAppDayChanging(value);
					this.SendPropertyChanging();
					this._AppDay = value;
					this.SendPropertyChanged("AppDay");
					this.OnAppDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppTime", DbType="Time")]
		public System.Nullable<System.TimeSpan> AppTime
		{
			get
			{
				return this._AppTime;
			}
			set
			{
				if ((this._AppTime != value))
				{
					this.OnAppTimeChanging(value);
					this.SendPropertyChanging();
					this._AppTime = value;
					this.SendPropertyChanged("AppTime");
					this.OnAppTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientID", DbType="Int")]
		public System.Nullable<int> PatientID
		{
			get
			{
				return this._PatientID;
			}
			set
			{
				if ((this._PatientID != value))
				{
					if (this._PatientTableNew.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientIDChanging(value);
					this.SendPropertyChanging();
					this._PatientID = value;
					this.SendPropertyChanged("PatientID");
					this.OnPatientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PatientTableNew_AppointTableNew", Storage="_PatientTableNew", ThisKey="PatientID", OtherKey="PatientID", IsForeignKey=true)]
		public PatientTableNew PatientTableNew
		{
			get
			{
				return this._PatientTableNew.Entity;
			}
			set
			{
				PatientTableNew previousValue = this._PatientTableNew.Entity;
				if (((previousValue != value) 
							|| (this._PatientTableNew.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PatientTableNew.Entity = null;
						previousValue.AppointTableNews.Remove(this);
					}
					this._PatientTableNew.Entity = value;
					if ((value != null))
					{
						value.AppointTableNews.Add(this);
						this._PatientID = value.PatientID;
					}
					else
					{
						this._PatientID = default(Nullable<int>);
					}
					this.SendPropertyChanged("PatientTableNew");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
